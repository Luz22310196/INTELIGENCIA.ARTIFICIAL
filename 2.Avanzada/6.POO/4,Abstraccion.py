# IMPORTAMOS LAS CLASES NECESARIAS PARA DEFINIR CLASES ABSTRACTAS
from abc import ABC, abstractmethod

# DEFINIMOS UNA CLASE ABSTRACTA LLAMADA "ANIMAL" QUE HEREDA DE "ABC" (ABSTRACT BASE CLASS)
class Animal(ABC):

    # DEFINIMOS UN MÉTODO ABSTRACTO LLAMADO "HABLAR"
    # ESTE MÉTODO DEBE SER IMPLEMENTADO OBLIGATORIAMENTE POR LAS SUBCLASES
    @abstractmethod
    def hablar(self):
        pass  # EL MÉTODO NO TIENE IMPLEMENTACIÓN AQUÍ, SOLO LA DEFINICIÓN

# DEFINIMOS UNA SUBCLASE "PERRO" QUE HEREDA DE "ANIMAL"
class Perro(Animal):
    # IMPLEMENTAMOS EL MÉTODO "HABLAR"
    def hablar(self):
        print("WOOF!")  # IMPRIME EL SONIDO QUE HACE UN PERRO

# DEFINIMOS OTRA SUBCLASE "GATO" QUE TAMBIÉN HEREDA DE "ANIMAL"
class Gato(Animal):
    # IMPLEMENTAMOS EL MÉTODO "HABLAR"
    def hablar(self):
        print("MEOW!")  # IMPRIME EL SONIDO QUE HACE UN GATO

# CREAMOS UNA INSTANCIA DE "PERRO"
perro = Perro()
# LLAMAMOS AL MÉTODO "HABLAR" DE LA INSTANCIA "PERRO"
perro.hablar()  # IMPRIME: WOOF!

# CREAMOS UNA INSTANCIA DE "GATO"
gato = Gato()
# LLAMAMOS AL MÉTODO "HABLAR" DE LA INSTANCIA "GATO"
gato.hablar()  # IMPRIME: MEOW!
